TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(x>7)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
getwd()
submit()
broing_function("My first function!")
baring_function("My first function!")
boring_function("My first function!")
mean
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
reaminder
remainder
remainder(divisor=11, num=5)
remainder(div=2, 4)
args(remainder)
submit
submit()
submit()
submit()
submit()
info()
submit()
submit()
evaluate(stdev, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegraph("Wow!")
telegram("Wow!")
submit
submit9
submit()
submit()
submit()
submit()
submit()
mad_libs("hell", "cold", "R")
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
0
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(cls_list,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, rnage)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
headplants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replace=TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25
)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
?%%
%mod
?mod
??mod
3 %% 3
5 %%3
If !(y %% 3 = 0 | y %% 5 = 0) print(TRUE)
If (!(y %% 3 = 0 | y %% 5 = 0)) print(TRUE)
If (!(y %% 3 = 0 | y %% 5 = 0)) {print(TRUE)}
If ((y %% 3 = 0 | y %% 5 = 0)) {print(TRUE)}
If ((y %% 3 = 0 | y %% 5 = 0)) print(TRUE)
y <- 1:9
If (!(y %% 3 = 0 | y %% 5 = 0)) print(TRUE)
If (!(y %% 3 = 0 | y %% 5 = 0)) print(y)
If ((y %% 3 = 0 | y %% 5 = 0)) print(y)
?sum
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(9)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multipleClasses()
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5()
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5()
sum(
lapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0))
y <- 0
}
)
)
sum(
slapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0))
y <- 0
}
)
)
sum(
sapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0))
y <- 0
}
)
)
sum(
lapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0))
y <- 0
}
)
)
lapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0))
y <- 0
}
)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5()
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5()
multof3and5(2)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(2)
multof3and5(3)
multof3and5(-9)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(-9)
multof3and5(3)
multof3and5(9)
multof3and5(999)
multof3and5(10)
multof3and5(11)
multof3and5(12)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(12)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(12)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
multof3and5(12)
multof3and5()
multof3and5(999)
sum(sapply(1:9, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0)) 0 else y}))
sum(sapply(1:999, function (y) {if ((y %% 3 != 0) & (y %% 5 != 0)) 0 else y}))
?fibonacci
??fibonacci
fibsum <- 0
lst <- cur <- 1
fibsum <- 0
lst <- cur <- 1
While (cur < lim) {
if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
fibsum <- 0
lst <- cur <- 1L
While (cur < lim) {
if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
While (cur < lim) {
if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
?while
()
While (cur < lim) {
if (cur %% 2 = 0) {fibsum <- fibsum + cur};
nxt <- lst + cur;
lst <- cur;
cur <- nxt
}
While (cur < lim) {
if (cur %% 2 = 0) {fibsum <- fibsum + cur};
nxt <- lst + cur;
lst <- cur;
cur <- nxt
}
fibsum <- 0L
lst <- cur <- 1L
While (cur < lim) {
# if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
fibsum <- 0L
lst <- cur <- 1L
While (cur < 10) {
# if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
cur
class (cur)
While (cur < lim) {
# if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
While (cur < 9) {
# if (cur %% 2 = 0) {fibsum <- fibsum + cur}
nxt <- lst + cur
lst <- cur
cur <- nxt
}
While (cur < 9) {
# if (cur %% 2 = 0) {fibsum <- fibsum + cur};
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
lim <- 9
While (cur < lim)
{if (cur %% 2 = 0) {fibsum <- fibsum + cur};
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
While (cur < lim)
{if (cur %% 2 = 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
while (cur < lin) {}
while (cur < lim) {}
lim <- 9
cur <- 1
lst <- 1
while (cur < lim) {cur <- cur + 1}
cur <- 1l
cur <- 1L
cur <- 1
class(cur)
while (cur < lim) {nxt <- lst + cur; lst <- cur; cur <- nxt;}
cur <- lst <- 1
while (cur < lim) {nxt <- lst + cur; lst <- cur; cur <- nxt;}
while (cur < lim) {if(cur %% 2 = 0) fibsum <- fibsum + cur; nxt <- lst + cur; lst <- cur; cur <- nxt;}
cur %% 2
if (cur %% 2 =0)
if (cur %% 2 = 0)
if (cur %% 2 = 0) 0 else 1
if ((cur %% 2 = 0)) 0 else 1
if (cur %% 2 = 0)
if (cur %% 2 = 0) TRUE
cur %% 2
if (cur %% 2 != 0) TRUE
if (cur %% 2 == 0) TRUE
fibsum <- 0
lst <- cur <- 1
While (cur < lim) {
if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
fibsum <- 0
lst <- cur <- 1
While (cur < lim) {
if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt
}
fibsum <- 0
lst <- cur <- 1
While (cur < lim) {
if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt
}
fibsum <- 0
lst <- cur <- 1
While (cur < lim)
{if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt
}
While (cur < lim)
{if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
While (cur < lim) {if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
fibsum <- 0
lst <- cur <- 1
while (cur < lim)
{if (cur %% 2 == 0) fibsum <- fibsum + cur;
nxt <- lst + cur;
lst <- cur;
cur <- nxt;
}
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
fibSumEvens(10)
fibSumEvens(35)
fibSumEvens()
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
fibSumEvens()
multof3and5()
?seq()
?apply
?tapply
system.time(fibSumEvens())
system.time(fibSumEvens(99))
system.time(fibSumEvens(99))
system.time(fibSumEvens(999999))
system.time(multof3and5())
system.time(multof3and5(10000000))
system.time(fibSumEvens(10000000))
system.time(fibSumEvens(1000000000))
system.time(fibSumEvens(100000000000))
fibSumEvens(10000000)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(21)
install.packages("numbers")
largestPrimeFactor(21)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(21)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(21)
largestPrimeFactor(23)
?last)
?last()
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(23)
largestPrimeFactor(21)
class(largestPrimeFactor(21))
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(13195)
largestPrimeFactor(600851475143)
largestPrimeFactor(713)
Primes(713)
primeFactors(713)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPrimeFactor(600851475143)
digits <- 1
rep(9, digits)
digits <- 2
rep(9, digits)
?rep)
?rep()
paste(rep(9,digits),sep="")
paste0(rep(9,digits))
paste0(rep(9,digits), collapse="")
paste(rep(9,digits), collapse="")
digits<-5
paste(rep(9,digits), collapse="")
digits<-1
paste(rep(9,digits), collapse="")
1:paste(rep(9,digits), collapse="")
paste(rep(9,digits), collapse=""):1
combn(paste(rep(9,digits), collapse=""), 2, FUN=product, simplify=TRUE)
?product
combn(paste(rep(9,digits), collapse=""), 2, FUN=prod, simplify=TRUE)
combn(paste(as.numeric(rep(9,digits), collapse="")), 2, FUN=prod, simplify=TRUE)
combn(paste(rep(9,digits), collapse=""), 2, FUN=prod, simplify=TRUE)
paste(rep(9,digits), collapse="")
as.numeric(paste(rep(9,digits), collapse=""))
combn(as.numeric(paste(rep(9,digits), collapse="")), 2, FUN=prod, simplify=TRUE)
digits<-2
combn(as.numeric(paste(rep(9,digits), collapse="")), 2, FUN=prod, simplify=TRUE)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
source('~/git-repos/ProjectEuler/ProjectEuler.R')
largestPalemdromProduct(2)
largestPalemdromProduct()
largestPalemdromProduct(1)
source('~/git-repos/ProjectEuler/ProjectEuler.R')
# R script to read security intelligence data from IBM xForce Exchange
source('~/git-repos/xForce/xForce.R')
setwd("~/git-repos/xForce")
load("~/git-repos/xForce/xForce.R")
source('~/git-repos/xForce/xForce.R')
# Load my favorite libraries
library(RCurl)
library(jsonlite)
library(dplyr)
# Get the authorization token from xForce Exchange. Save the token in the curl
# options for use on all xForce API calls.
xfe_auth = fromJSON(getURL("https://xforce-api.mybluemix.net/auth/anonymousToken"))
xfe_auth = fromJSON(getURL("https://xforce-api.mybluemix.net/auth/anonymousToken"))
curl.opts <- list(httpheader = c("Accept-Language" = "en-US",
"Accept-Encoding" = "gzip",
"Authorization" = paste("Bearer", xfe_auth$token),
"Accept" = "application/json"))
# Call xForce to return the list of all known applications in JSON format.
# JASON key "canonicalNames" holds the list of application names.
appList <- fromJSON(getURL("https://xforce-api.mybluemix.net/app",
.opts = curl.opts))
xfe_auth
xfe_auth$token
source('~/git-repos/xForce/xForce.R')
source('~/git-repos/xForce/xForce.R')
head(appData)
View(appData)
source('~/git-repos/xForce/xForce.R')
source('~/git-repos/xForce/xForce.R')
source('~/git-repos/xForce/xForce.R')
appList
xfe_auth
source('~/git-repos/xForce/xForce.R')
source('~/git-repos/xForce/xForce.R')
